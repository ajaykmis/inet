%description:

This is a test for NewRadio interference handling.
The first signal is stronger than the reception threshold.
The second signal is stronger than the reception threshold.
The second signal is much stronger than the first signal.
The radio cannot switch to receiving the second signal.
No signals are expected to be received.

%file: test.ned

import inet.networklayer.autorouting.ipv4.IPv4NetworkConfigurator;
import inet.nodes.inet.WirelessHost;
import inet.physicallayer.radio.new.NewRadioChannel;

network Test
{
    submodules:
        radioChannel: NewRadioChannel;
        configurator: IPv4NetworkConfigurator;
        hostSender1: WirelessHost;
        hostSender2: WirelessHost;
        hostReceiver: WirelessHost;
}

%inifile: omnetpp.ini

[General]
network = Test
sim-time-limit = 400us
record-eventlog = true
ned-path = .;../../../../src

**.globalARP = true

**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false
**.mobility.initialY = 500m
**.mobility.initialZ = 0m
*.host*.mobilityType = "StationaryMobility"
*.hostSender1.mobility.initialX = 200m
*.hostSender2.mobility.initialX = 800m
*.hostReceiver.mobility.initialX = 400m

# radio channel
*.radioChannel.backgroundNoise.typename = "ScalarRadioBackgroundNoise"
*.radioChannel.backgroundNoise.power = 1E-14W
*.radioChannel.attenuation.typename = "ScalarRadioSignalFreeSpaceAttenuation"
*.radioChannel.attenuation.alpha = 2

# nic
*.host*.wlan[*].typename = "IdealWirelessNic"
*.host*.wlan[*].bitrate = 2Mbps
*.host*.wlan[*].mac.headerLength = 10B
*.host*.wlan[*].mac.fullDuplex = false
*.host*.wlan[*].radioType = "NewRadio"
*.host*.wlan[*].radio.modulator.typename = "ScalarRadioSignalModulator"
*.host*.wlan[*].radio.modulator.bitrate = 2Mbps
*.host*.wlan[*].radio.modulator.headerBitLength = 100b
*.host*.wlan[*].radio.modulator.carrierFrequency = 2.4GHz
*.host*.wlan[*].radio.modulator.bandwidth = 2MHz
*.host*.wlan[*].radio.antenna.typename = "IsotropicRadioAntenna"
*.host*.wlan[*].radio.decider.typename = "ScalarSNRRadioDecider"
*.host*.wlan[*].radio.decider.sensitivity = 1E-11W
*.host*.wlan[*].radio.decider.snrThreshold = 10
*.hostSender1.wlan[*].radio.modulator.power = 10mW
*.hostSender2.wlan[*].radio.modulator.power = 1000mW
*.hostReceiver.wlan[*].radio.modulator.power = 0W

# ping app
*.hostSender*.numPingApps = 1
*.hostSender*.pingApp[0].count = 1
*.hostSender*.pingApp[0].printPing = true
*.hostSender*.pingApp[0].destAddr = "hostReceiver"
*.hostSender*.pingApp[0].startTime = 0s

%contains: results/General-0.elog
 - Changing radio reception state from IDLE to RECEIVING.
%contains: results/General-0.elog
 - Received (IdealMacFrame)ping0 contains bit errors or collision, dropping it
%not-contains: results/General-0.elog
 - Passing up contained packet `ping0' to higher layer
%#--------------------------------------------------------------------------------------------------------------
%not-contains: stdout
undisposed object:
%not-contains: stdout
-- check module destructor
%#--------------------------------------------------------------------------------------------------------------
